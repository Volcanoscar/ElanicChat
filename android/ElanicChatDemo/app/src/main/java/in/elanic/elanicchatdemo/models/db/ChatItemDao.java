package in.elanic.elanicchatdemo.models.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import in.elanic.elanicchatdemo.models.db.ChatItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_ITEM".
*/
public class ChatItemDao extends AbstractDao<ChatItem, String> {

    public static final String TABLENAME = "CHAT_ITEM";

    /**
     * Properties of entity ChatItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Chat_id = new Property(0, String.class, "chat_id", true, "CHAT_ID");
        public final static Property Buyer_id = new Property(1, String.class, "buyer_id", false, "BUYER_ID");
        public final static Property Seller_id = new Property(2, String.class, "seller_id", false, "SELLER_ID");
        public final static Property Product_id = new Property(3, String.class, "product_id", false, "PRODUCT_ID");
        public final static Property Status = new Property(4, Integer.class, "status", false, "STATUS");
        public final static Property Created_at = new Property(5, java.util.Date.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(6, java.util.Date.class, "updated_at", false, "UPDATED_AT");
        public final static Property Is_deleted = new Property(7, Boolean.class, "is_deleted", false, "IS_DELETED");
    };

    private DaoSession daoSession;


    public ChatItemDao(DaoConfig config) {
        super(config);
    }
    
    public ChatItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_ITEM\" (" + //
                "\"CHAT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: chat_id
                "\"BUYER_ID\" TEXT," + // 1: buyer_id
                "\"SELLER_ID\" TEXT," + // 2: seller_id
                "\"PRODUCT_ID\" TEXT," + // 3: product_id
                "\"STATUS\" INTEGER," + // 4: status
                "\"CREATED_AT\" INTEGER," + // 5: created_at
                "\"UPDATED_AT\" INTEGER," + // 6: updated_at
                "\"IS_DELETED\" INTEGER);"); // 7: is_deleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatItem entity) {
        stmt.clearBindings();
 
        String chat_id = entity.getChat_id();
        if (chat_id != null) {
            stmt.bindString(1, chat_id);
        }
 
        String buyer_id = entity.getBuyer_id();
        if (buyer_id != null) {
            stmt.bindString(2, buyer_id);
        }
 
        String seller_id = entity.getSeller_id();
        if (seller_id != null) {
            stmt.bindString(3, seller_id);
        }
 
        String product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindString(4, product_id);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(5, status);
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(6, created_at.getTime());
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(7, updated_at.getTime());
        }
 
        Boolean is_deleted = entity.getIs_deleted();
        if (is_deleted != null) {
            stmt.bindLong(8, is_deleted ? 1L: 0L);
        }
    }

    @Override
    protected void attachEntity(ChatItem entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChatItem readEntity(Cursor cursor, int offset) {
        ChatItem entity = new ChatItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // chat_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // buyer_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // seller_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // product_id
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // status
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // created_at
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // updated_at
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // is_deleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChatItem entity, int offset) {
        entity.setChat_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBuyer_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSeller_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProduct_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setCreated_at(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setUpdated_at(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setIs_deleted(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ChatItem entity, long rowId) {
        return entity.getChat_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ChatItem entity) {
        if(entity != null) {
            return entity.getChat_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getProductDao().getAllColumns());
            builder.append(" FROM CHAT_ITEM T");
            builder.append(" LEFT JOIN USER T0 ON T.\"BUYER_ID\"=T0.\"USER_ID\"");
            builder.append(" LEFT JOIN USER T1 ON T.\"SELLER_ID\"=T1.\"USER_ID\"");
            builder.append(" LEFT JOIN PRODUCT T2 ON T.\"PRODUCT_ID\"=T2.\"PRODUCT_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ChatItem loadCurrentDeep(Cursor cursor, boolean lock) {
        ChatItem entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User buyer = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setBuyer(buyer);
        offset += daoSession.getUserDao().getAllColumns().length;

        User seller = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setSeller(seller);
        offset += daoSession.getUserDao().getAllColumns().length;

        Product product = loadCurrentOther(daoSession.getProductDao(), cursor, offset);
        entity.setProduct(product);

        return entity;    
    }

    public ChatItem loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ChatItem> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ChatItem> list = new ArrayList<ChatItem>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ChatItem> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ChatItem> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
