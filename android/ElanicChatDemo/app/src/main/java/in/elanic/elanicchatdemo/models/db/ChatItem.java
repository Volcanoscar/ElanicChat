package in.elanic.elanicchatdemo.models.db;

import in.elanic.elanicchatdemo.models.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CHAT_ITEM".
 */
public class ChatItem {

    private String chat_id;
    private String buyer_id;
    private String seller_id;
    private String product_id;
    private Integer status;
    private java.util.Date created_at;
    private java.util.Date updated_at;
    private Boolean is_deleted;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ChatItemDao myDao;

    private User buyer;
    private String buyer__resolvedKey;

    private User seller;
    private String seller__resolvedKey;

    private Product product;
    private String product__resolvedKey;


    public ChatItem() {
    }

    public ChatItem(String chat_id) {
        this.chat_id = chat_id;
    }

    public ChatItem(String chat_id, String buyer_id, String seller_id, String product_id, Integer status, java.util.Date created_at, java.util.Date updated_at, Boolean is_deleted) {
        this.chat_id = chat_id;
        this.buyer_id = buyer_id;
        this.seller_id = seller_id;
        this.product_id = product_id;
        this.status = status;
        this.created_at = created_at;
        this.updated_at = updated_at;
        this.is_deleted = is_deleted;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getChatItemDao() : null;
    }

    public String getChat_id() {
        return chat_id;
    }

    public void setChat_id(String chat_id) {
        this.chat_id = chat_id;
    }

    public String getBuyer_id() {
        return buyer_id;
    }

    public void setBuyer_id(String buyer_id) {
        this.buyer_id = buyer_id;
    }

    public String getSeller_id() {
        return seller_id;
    }

    public void setSeller_id(String seller_id) {
        this.seller_id = seller_id;
    }

    public String getProduct_id() {
        return product_id;
    }

    public void setProduct_id(String product_id) {
        this.product_id = product_id;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public java.util.Date getCreated_at() {
        return created_at;
    }

    public void setCreated_at(java.util.Date created_at) {
        this.created_at = created_at;
    }

    public java.util.Date getUpdated_at() {
        return updated_at;
    }

    public void setUpdated_at(java.util.Date updated_at) {
        this.updated_at = updated_at;
    }

    public Boolean getIs_deleted() {
        return is_deleted;
    }

    public void setIs_deleted(Boolean is_deleted) {
        this.is_deleted = is_deleted;
    }

    /** To-one relationship, resolved on first access. */
    public User getBuyer() {
        String __key = this.buyer_id;
        if (buyer__resolvedKey == null || buyer__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User buyerNew = targetDao.load(__key);
            synchronized (this) {
                buyer = buyerNew;
            	buyer__resolvedKey = __key;
            }
        }
        return buyer;
    }

    public void setBuyer(User buyer) {
        synchronized (this) {
            this.buyer = buyer;
            buyer_id = buyer == null ? null : buyer.getUser_id();
            buyer__resolvedKey = buyer_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public User getSeller() {
        String __key = this.seller_id;
        if (seller__resolvedKey == null || seller__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User sellerNew = targetDao.load(__key);
            synchronized (this) {
                seller = sellerNew;
            	seller__resolvedKey = __key;
            }
        }
        return seller;
    }

    public void setSeller(User seller) {
        synchronized (this) {
            this.seller = seller;
            seller_id = seller == null ? null : seller.getUser_id();
            seller__resolvedKey = seller_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Product getProduct() {
        String __key = this.product_id;
        if (product__resolvedKey == null || product__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProductDao targetDao = daoSession.getProductDao();
            Product productNew = targetDao.load(__key);
            synchronized (this) {
                product = productNew;
            	product__resolvedKey = __key;
            }
        }
        return product;
    }

    public void setProduct(Product product) {
        synchronized (this) {
            this.product = product;
            product_id = product == null ? null : product.getProduct_id();
            product__resolvedKey = product_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
