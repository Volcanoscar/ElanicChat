package in.elanic.elanicchatdemo.models.db;

import in.elanic.elanicchatdemo.models.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "MESSAGE".
 */
public class Message {

    private String message_id;
    private Integer type;
    private String content;
    private String receiver_id;
    private String sender_id;
    private Integer offer_price;
    private java.util.Date created_at;
    private java.util.Date updated_at;
    private Boolean is_deleted;
    private String product_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MessageDao myDao;

    private User receiver;
    private String receiver__resolvedKey;

    private User sender;
    private String sender__resolvedKey;

    private Product product;
    private String product__resolvedKey;


    public Message() {
    }

    public Message(String message_id) {
        this.message_id = message_id;
    }

    public Message(String message_id, Integer type, String content, String receiver_id, String sender_id, Integer offer_price, java.util.Date created_at, java.util.Date updated_at, Boolean is_deleted, String product_id) {
        this.message_id = message_id;
        this.type = type;
        this.content = content;
        this.receiver_id = receiver_id;
        this.sender_id = sender_id;
        this.offer_price = offer_price;
        this.created_at = created_at;
        this.updated_at = updated_at;
        this.is_deleted = is_deleted;
        this.product_id = product_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMessageDao() : null;
    }

    public String getMessage_id() {
        return message_id;
    }

    public void setMessage_id(String message_id) {
        this.message_id = message_id;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public String getReceiver_id() {
        return receiver_id;
    }

    public void setReceiver_id(String receiver_id) {
        this.receiver_id = receiver_id;
    }

    public String getSender_id() {
        return sender_id;
    }

    public void setSender_id(String sender_id) {
        this.sender_id = sender_id;
    }

    public Integer getOffer_price() {
        return offer_price;
    }

    public void setOffer_price(Integer offer_price) {
        this.offer_price = offer_price;
    }

    public java.util.Date getCreated_at() {
        return created_at;
    }

    public void setCreated_at(java.util.Date created_at) {
        this.created_at = created_at;
    }

    public java.util.Date getUpdated_at() {
        return updated_at;
    }

    public void setUpdated_at(java.util.Date updated_at) {
        this.updated_at = updated_at;
    }

    public Boolean getIs_deleted() {
        return is_deleted;
    }

    public void setIs_deleted(Boolean is_deleted) {
        this.is_deleted = is_deleted;
    }

    public String getProduct_id() {
        return product_id;
    }

    public void setProduct_id(String product_id) {
        this.product_id = product_id;
    }

    /** To-one relationship, resolved on first access. */
    public User getReceiver() {
        String __key = this.receiver_id;
        if (receiver__resolvedKey == null || receiver__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User receiverNew = targetDao.load(__key);
            synchronized (this) {
                receiver = receiverNew;
            	receiver__resolvedKey = __key;
            }
        }
        return receiver;
    }

    public void setReceiver(User receiver) {
        synchronized (this) {
            this.receiver = receiver;
            receiver_id = receiver == null ? null : receiver.getUser_id();
            receiver__resolvedKey = receiver_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public User getSender() {
        String __key = this.sender_id;
        if (sender__resolvedKey == null || sender__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User senderNew = targetDao.load(__key);
            synchronized (this) {
                sender = senderNew;
            	sender__resolvedKey = __key;
            }
        }
        return sender;
    }

    public void setSender(User sender) {
        synchronized (this) {
            this.sender = sender;
            sender_id = sender == null ? null : sender.getUser_id();
            sender__resolvedKey = sender_id;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Product getProduct() {
        String __key = this.product_id;
        if (product__resolvedKey == null || product__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProductDao targetDao = daoSession.getProductDao();
            Product productNew = targetDao.load(__key);
            synchronized (this) {
                product = productNew;
            	product__resolvedKey = __key;
            }
        }
        return product;
    }

    public void setProduct(Product product) {
        synchronized (this) {
            this.product = product;
            product_id = product == null ? null : product.getProduct_id();
            product__resolvedKey = product_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
