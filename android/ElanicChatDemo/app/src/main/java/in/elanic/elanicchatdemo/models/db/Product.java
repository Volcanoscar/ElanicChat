package in.elanic.elanicchatdemo.models.db;

import in.elanic.elanicchatdemo.models.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "PRODUCT".
 */
public class Product {

    private String product_id;
    private String user_id;
    private String title;
    private String description;
    private Integer selling_price;
    private Integer purchase_price;
    private Integer views;
    private Integer likes;
    private Boolean is_available;
    private Boolean is_nwt;
    private String category;
    private String size;
    private String color;
    private String brand;
    private String status;
    private java.util.Date created_at;
    private java.util.Date updated_at;
    private Boolean is_deleted;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ProductDao myDao;

    private User author;
    private String author__resolvedKey;


    public Product() {
    }

    public Product(String product_id) {
        this.product_id = product_id;
    }

    public Product(String product_id, String user_id, String title, String description, Integer selling_price, Integer purchase_price, Integer views, Integer likes, Boolean is_available, Boolean is_nwt, String category, String size, String color, String brand, String status, java.util.Date created_at, java.util.Date updated_at, Boolean is_deleted) {
        this.product_id = product_id;
        this.user_id = user_id;
        this.title = title;
        this.description = description;
        this.selling_price = selling_price;
        this.purchase_price = purchase_price;
        this.views = views;
        this.likes = likes;
        this.is_available = is_available;
        this.is_nwt = is_nwt;
        this.category = category;
        this.size = size;
        this.color = color;
        this.brand = brand;
        this.status = status;
        this.created_at = created_at;
        this.updated_at = updated_at;
        this.is_deleted = is_deleted;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProductDao() : null;
    }

    public String getProduct_id() {
        return product_id;
    }

    public void setProduct_id(String product_id) {
        this.product_id = product_id;
    }

    public String getUser_id() {
        return user_id;
    }

    public void setUser_id(String user_id) {
        this.user_id = user_id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Integer getSelling_price() {
        return selling_price;
    }

    public void setSelling_price(Integer selling_price) {
        this.selling_price = selling_price;
    }

    public Integer getPurchase_price() {
        return purchase_price;
    }

    public void setPurchase_price(Integer purchase_price) {
        this.purchase_price = purchase_price;
    }

    public Integer getViews() {
        return views;
    }

    public void setViews(Integer views) {
        this.views = views;
    }

    public Integer getLikes() {
        return likes;
    }

    public void setLikes(Integer likes) {
        this.likes = likes;
    }

    public Boolean getIs_available() {
        return is_available;
    }

    public void setIs_available(Boolean is_available) {
        this.is_available = is_available;
    }

    public Boolean getIs_nwt() {
        return is_nwt;
    }

    public void setIs_nwt(Boolean is_nwt) {
        this.is_nwt = is_nwt;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public String getSize() {
        return size;
    }

    public void setSize(String size) {
        this.size = size;
    }

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    public String getBrand() {
        return brand;
    }

    public void setBrand(String brand) {
        this.brand = brand;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public java.util.Date getCreated_at() {
        return created_at;
    }

    public void setCreated_at(java.util.Date created_at) {
        this.created_at = created_at;
    }

    public java.util.Date getUpdated_at() {
        return updated_at;
    }

    public void setUpdated_at(java.util.Date updated_at) {
        this.updated_at = updated_at;
    }

    public Boolean getIs_deleted() {
        return is_deleted;
    }

    public void setIs_deleted(Boolean is_deleted) {
        this.is_deleted = is_deleted;
    }

    /** To-one relationship, resolved on first access. */
    public User getAuthor() {
        String __key = this.user_id;
        if (author__resolvedKey == null || author__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User authorNew = targetDao.load(__key);
            synchronized (this) {
                author = authorNew;
            	author__resolvedKey = __key;
            }
        }
        return author;
    }

    public void setAuthor(User author) {
        synchronized (this) {
            this.author = author;
            user_id = author == null ? null : author.getUser_id();
            author__resolvedKey = user_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
