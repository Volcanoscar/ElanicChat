package in.elanic.elanicchatdemo.models.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import in.elanic.elanicchatdemo.models.db.Product;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT".
*/
public class ProductDao extends AbstractDao<Product, String> {

    public static final String TABLENAME = "PRODUCT";

    /**
     * Properties of entity Product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Product_id = new Property(0, String.class, "product_id", true, "PRODUCT_ID");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Selling_price = new Property(4, Integer.class, "selling_price", false, "SELLING_PRICE");
        public final static Property Purchase_price = new Property(5, Integer.class, "purchase_price", false, "PURCHASE_PRICE");
        public final static Property Views = new Property(6, Integer.class, "views", false, "VIEWS");
        public final static Property Likes = new Property(7, Integer.class, "likes", false, "LIKES");
        public final static Property Is_available = new Property(8, Boolean.class, "is_available", false, "IS_AVAILABLE");
        public final static Property Is_nwt = new Property(9, Boolean.class, "is_nwt", false, "IS_NWT");
        public final static Property Category = new Property(10, String.class, "category", false, "CATEGORY");
        public final static Property Size = new Property(11, String.class, "size", false, "SIZE");
        public final static Property Color = new Property(12, String.class, "color", false, "COLOR");
        public final static Property Brand = new Property(13, String.class, "brand", false, "BRAND");
        public final static Property Status = new Property(14, String.class, "status", false, "STATUS");
        public final static Property Created_at = new Property(15, java.util.Date.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(16, java.util.Date.class, "updated_at", false, "UPDATED_AT");
        public final static Property Is_deleted = new Property(17, Boolean.class, "is_deleted", false, "IS_DELETED");
    };

    private DaoSession daoSession;


    public ProductDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT\" (" + //
                "\"PRODUCT_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: product_id
                "\"USER_ID\" TEXT," + // 1: user_id
                "\"TITLE\" TEXT," + // 2: title
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"SELLING_PRICE\" INTEGER," + // 4: selling_price
                "\"PURCHASE_PRICE\" INTEGER," + // 5: purchase_price
                "\"VIEWS\" INTEGER," + // 6: views
                "\"LIKES\" INTEGER," + // 7: likes
                "\"IS_AVAILABLE\" INTEGER," + // 8: is_available
                "\"IS_NWT\" INTEGER," + // 9: is_nwt
                "\"CATEGORY\" TEXT," + // 10: category
                "\"SIZE\" TEXT," + // 11: size
                "\"COLOR\" TEXT," + // 12: color
                "\"BRAND\" TEXT," + // 13: brand
                "\"STATUS\" TEXT," + // 14: status
                "\"CREATED_AT\" INTEGER," + // 15: created_at
                "\"UPDATED_AT\" INTEGER," + // 16: updated_at
                "\"IS_DELETED\" INTEGER);"); // 17: is_deleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Product entity) {
        stmt.clearBindings();
 
        String product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindString(1, product_id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        Integer selling_price = entity.getSelling_price();
        if (selling_price != null) {
            stmt.bindLong(5, selling_price);
        }
 
        Integer purchase_price = entity.getPurchase_price();
        if (purchase_price != null) {
            stmt.bindLong(6, purchase_price);
        }
 
        Integer views = entity.getViews();
        if (views != null) {
            stmt.bindLong(7, views);
        }
 
        Integer likes = entity.getLikes();
        if (likes != null) {
            stmt.bindLong(8, likes);
        }
 
        Boolean is_available = entity.getIs_available();
        if (is_available != null) {
            stmt.bindLong(9, is_available ? 1L: 0L);
        }
 
        Boolean is_nwt = entity.getIs_nwt();
        if (is_nwt != null) {
            stmt.bindLong(10, is_nwt ? 1L: 0L);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(11, category);
        }
 
        String size = entity.getSize();
        if (size != null) {
            stmt.bindString(12, size);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(13, color);
        }
 
        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(14, brand);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(15, status);
        }
 
        java.util.Date created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindLong(16, created_at.getTime());
        }
 
        java.util.Date updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindLong(17, updated_at.getTime());
        }
 
        Boolean is_deleted = entity.getIs_deleted();
        if (is_deleted != null) {
            stmt.bindLong(18, is_deleted ? 1L: 0L);
        }
    }

    @Override
    protected void attachEntity(Product entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Product readEntity(Cursor cursor, int offset) {
        Product entity = new Product( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // product_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // selling_price
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // purchase_price
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // views
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // likes
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // is_available
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // is_nwt
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // category
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // size
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // color
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // brand
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // status
            cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)), // created_at
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)), // updated_at
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0 // is_deleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Product entity, int offset) {
        entity.setProduct_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSelling_price(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPurchase_price(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setViews(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setLikes(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIs_available(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setIs_nwt(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setCategory(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSize(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setColor(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBrand(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStatus(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCreated_at(cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)));
        entity.setUpdated_at(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
        entity.setIs_deleted(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Product entity, long rowId) {
        return entity.getProduct_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Product entity) {
        if(entity != null) {
            return entity.getProduct_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM PRODUCT T");
            builder.append(" LEFT JOIN USER T0 ON T.\"USER_ID\"=T0.\"USER_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Product loadCurrentDeep(Cursor cursor, boolean lock) {
        Product entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User author = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setAuthor(author);

        return entity;    
    }

    public Product loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Product> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Product> list = new ArrayList<Product>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Product> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Product> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
